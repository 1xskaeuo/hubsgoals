// –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
let tasks = [];

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const taskInput = document.getElementById('taskInput');
const difficultySelect = document.getElementById('difficultySelect');
const deadlineInput = document.getElementById('deadlineInput');
const addTaskBtn = document.getElementById('addTaskBtn');
const tasksList = document.getElementById('tasksList');
const deadlinesList = document.getElementById('deadlinesList');
const allTasksList = document.getElementById('allTasksList');
const tasksCount = document.querySelector('.tasks-count');
const viewAllBtn = document.getElementById('viewAllTasks');
const allTasksModal = document.getElementById('allTasksModal');
const closeAllTasks = document.getElementById('closeAllTasks');
const filterBtns = document.querySelectorAll('.filter-btn');

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
const profileAvatar = document.getElementById('profileAvatar');
const profileModal = document.getElementById('profileModal');
const closeProfile = document.getElementById('closeProfile');
const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeSettings = document.getElementById('closeSettings');
const logoutBtn = document.getElementById('logoutBtn');
const themeBtns = document.querySelectorAll('.theme-btn');
const uploadBtn = document.getElementById('uploadBtn');
const avatarUpload = document.getElementById('avatarUpload');
const avatarPreview = document.getElementById('avatarPreview');
const profileAvatarLarge = document.getElementById('profileAvatarLarge');
const saveSettingsBtn = document.getElementById('saveSettingsBtn');

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function addTask() {
    const taskInput = document.getElementById('taskInput');
    const difficultySelect = document.getElementById('difficultySelect');
    const deadlineInput = document.getElementById('deadlineInput');
    
    const taskText = taskInput.value.trim();
    const difficulty = difficultySelect.value;
    const deadline = deadlineInput.value;
    
    if (!taskText) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
        return;
    }
    
    const newTask = {
        id: Date.now(),
        text: taskText,
        difficulty: difficulty,
        deadline: deadline,
        completed: false,
        createdAt: new Date()
    };
    
    tasks.push(newTask);
    updateTasksDisplay();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    taskInput.value = '';
    difficultySelect.value = '';
    deadlineInput.value = '';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ localStorage
function saveTasks() {
    localStorage.setItem('tasks', JSON.stringify(tasks));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ localStorage
function loadTasks() {
    const savedTasks = localStorage.getItem('tasks');
    if (savedTasks) {
        tasks = JSON.parse(savedTasks);
    }
    updateTasksDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
function updateTasksDisplay() {
    const tasksList = document.getElementById('tasksList');
    const deadlinesList = document.getElementById('deadlinesList');
    const tasksCount = document.querySelector('.tasks-count');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
    const activeTasks = tasks.filter(task => !task.completed);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á
    tasksCount.textContent = `${activeTasks.length} ${getTaskWord(activeTasks.length)}`;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
    tasksList.innerHTML = '';
    deadlinesList.innerHTML = '';
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if (activeTasks.length === 0) {
        tasksList.innerHTML = `
            <div class="empty-tasks">
                <div class="empty-icon">üìù</div>
                <div>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</div>
                <div>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É</div>
            </div>
        `;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        activeTasks.forEach(task => {
            const taskElement = createTaskElement(task);
            tasksList.appendChild(taskElement);
        });
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
    const tasksWithDeadlines = activeTasks.filter(task => task.deadline);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
    if (tasksWithDeadlines.length === 0) {
        deadlinesList.innerHTML = `
            <div class="empty-deadlines">
                <div class="empty-icon">‚è∞</div>
                <div>–ù–µ—Ç –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏</div>
            </div>
        `;
    } else {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (–±–ª–∏–∂–∞–π—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        tasksWithDeadlines.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
        tasksWithDeadlines.forEach(task => {
            const deadlineElement = createDeadlineElement(task);
            deadlinesList.appendChild(deadlineElement);
        });
    }
}


// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
function createTaskElement(task) {
    const taskElement = document.createElement('div');
    taskElement.className = `task-item ${task.difficulty}`;
    taskElement.dataset.id = task.id;
    
    const deadlineInfo = task.deadline ? getDeadlineInfo(task.deadline) : null;
    
    taskElement.innerHTML = `
        <div class="task-header">
            <span class="task-text">${task.text}</span>
            <span class="task-difficulty">${getDifficultyText(task.difficulty)}</span>
        </div>
        <div class="task-footer">
            ${task.deadline ? `
                <div class="task-timer ${deadlineInfo.class}">
                    <i class="far fa-clock"></i>
                    <span class="timer-text">${deadlineInfo.text}</span>
                </div>
            ` : '<div></div>'}
            <div class="task-actions">
                <button class="task-action-btn complete-btn" title="–ó–∞–≤–µ—Ä—à–∏—Ç—å"><i class="far fa-check-circle"></i></button>
                <button class="task-action-btn edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"><i class="far fa-edit"></i></button>
                <button class="task-action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å"><i class="far fa-trash-alt"></i></button>
            </div>
        </div>
    `;
    
    return taskElement;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
function createDeadlineElement(task) {
    const deadlineInfo = getDeadlineInfo(task.deadline);
    
    const deadlineElement = document.createElement('div');
    deadlineElement.className = `deadline-item ${deadlineInfo.class}`;
    deadlineElement.dataset.id = task.id;
    
    deadlineElement.innerHTML = `
        <div class="deadline-text">
            <i class="fas fa-tasks"></i>
            ${task.text}
            <span class="deadline-timer">${deadlineInfo.text}</span>
        </div>
        <div class="deadline-time">
            <i class="far fa-calendar-alt"></i>
            ${formatDateTime(task.deadline)}
        </div>
    `;
    
    return deadlineElement;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–¥–ª–∞–π–Ω–µ
function getDeadlineInfo(deadline) {
    const now = new Date();
    const deadlineDate = new Date(deadline);
    const diffMs = deadlineDate - now;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    if (diffMs <= 0) {
        return {
            text: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!',
            class: 'urgent'
        };
    } else if (diffDays === 0 && diffHours < 12) {
        return {
            text: `–û—Å—Ç–∞–ª–æ—Å—å ${diffHours}—á ${diffMinutes}–º`,
            class: 'urgent'
        };
    } else if (diffDays < 3) {
        return {
            text: `–û—Å—Ç–∞–ª–æ—Å—å ${diffDays}–¥ ${diffHours}—á`,
            class: 'warning'
        };
    } else {
        return {
            text: `–û—Å—Ç–∞–ª–æ—Å—å ${diffDays} –¥–Ω–µ–π`,
            class: 'normal'
        };
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(dateTimeString) {
    const date = new Date(dateTimeString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
function updateTimers() {
    document.querySelectorAll('.timer-text').forEach(timer => {
        const taskElement = timer.closest('.task-item');
        const taskId = parseInt(taskElement.dataset.id);
        const task = tasks.find(t => t.id === taskId);
        
        if (task && task.deadline) {
            const deadlineInfo = getDeadlineInfo(task.deadline);
            timer.textContent = deadlineInfo.text;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–∞–π–º–µ—Ä–∞
            const timerContainer = timer.closest('.task-timer');
            timerContainer.className = `task-timer ${deadlineInfo.class}`;
        }
    });
    
    document.querySelectorAll('.deadline-timer').forEach(timer => {
        const deadlineElement = timer.closest('.deadline-item');
        const taskId = parseInt(deadlineElement.dataset.id);
        const task = tasks.find(t => t.id === taskId);
        
        if (task && task.deadline) {
            const deadlineInfo = getDeadlineInfo(task.deadline);
            timer.textContent = deadlineInfo.text;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–µ–¥–ª–∞–π–Ω–∞
            deadlineElement.className = `deadline-item ${deadlineInfo.class}`;
        }
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function getDifficultyText(difficulty) {
    switch(difficulty) {
        case 'easy': return '–õ–µ–≥–∫–∞—è';
        case 'medium': return '–°—Ä–µ–¥–Ω—è—è';
        case 'hard': return '–°–ª–æ–∂–Ω–∞—è';
        default: return '';
    }
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á–∞"
function getTaskWordForm(count) {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
        return '–∑–∞–¥–∞—á';
    }
    
    if (lastDigit === 1) {
        return '–∑–∞–¥–∞—á–∞';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
        return '–∑–∞–¥–∞—á–∏';
    }
    
    return '–∑–∞–¥–∞—á';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
function openAllTasksModal(filter = 'all') {
    allTasksList.innerHTML = '';
    
    let filteredTasks = [...tasks];
    
    if (filter === 'completed') {
        filteredTasks = tasks.filter(task => task.completed);
    } else if (filter === 'active') {
        filteredTasks = tasks.filter(task => !task.completed);
    } else if (filter === 'easy') {
        filteredTasks = tasks.filter(task => task.difficulty === 'easy');
    } else if (filter === 'medium') {
        filteredTasks = tasks.filter(task => task.difficulty === 'medium');
    } else if (filter === 'hard') {
        filteredTasks = tasks.filter(task => task.difficulty === 'hard');
    } else if (filter === 'deadline') {
        filteredTasks = tasks.filter(task => task.deadline);
    }
    
    if (filteredTasks.length === 0) {
        allTasksList.innerHTML = `
            <div class="empty-all-tasks">
                <div class="empty-icon">üìù</div>
                <div>–ù–µ—Ç –∑–∞–¥–∞—á –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É</div>
            </div>
        `;
    } else {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        filteredTasks.sort((a, b) => {
            if (a.completed === b.completed) {
                return new Date(b.createdAt) - new Date(a.createdAt);
            }
            return a.completed ? 1 : -1;
        });
        
        filteredTasks.forEach(task => {
            const taskElement = createAllTaskElement(task);
            allTasksList.appendChild(taskElement);
        });
    }
    
    allTasksModal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function createAllTaskElement(task) {
    const taskElement = document.createElement('div');
    taskElement.className = `task-item ${task.difficulty} ${task.completed ? 'completed' : ''}`;
    taskElement.dataset.id = task.id;
    
    const deadlineInfo = task.deadline ? getDeadlineInfo(task.deadline) : null;
    
    taskElement.innerHTML = `
        <div class="task-header">
            <span class="task-text">${task.text}</span>
            <span class="task-difficulty">${getDifficultyText(task.difficulty)}</span>
        </div>
        <div class="task-footer">
            ${task.deadline ? `
                <div class="task-timer ${deadlineInfo.class}">
                    <i class="far fa-clock"></i>
                    <span class="timer-text">${deadlineInfo.text}</span>
                </div>
            ` : '<div></div>'}
            <div class="task-time">
                <i class="far fa-calendar-alt"></i>
                ${formatDateTime(task.createdAt)}
            </div>
            <div class="task-actions">
                <button class="task-action-btn toggle-btn" title="${task.completed ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}">
                    <i class="far ${task.completed ? 'fa-undo-alt' : 'fa-check-circle'}"></i>
                </button>
                <button class="task-action-btn edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <i class="far fa-edit"></i>
                </button>
                <button class="task-action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">
                    <i class="far fa-trash-alt"></i>
                </button>
            </div>
        </div>
    `;
    
    return taskElement;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
function closeAllTasksModal() {
    allTasksModal.classList.remove('active');
    document.body.style.overflow = '';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞—á–∞–º
function handleTaskAction(e) {
    const target = e.target;
    const taskElement = target.closest('.task-item');
    if (!taskElement) return;
    
    const taskId = parseInt(taskElement.dataset.id);
    const taskIndex = tasks.findIndex(task => task.id === taskId);
    
    if (target.closest('.complete-btn') || target.closest('.toggle-btn')) {
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        tasks[taskIndex].completed = !tasks[taskIndex].completed;
        saveTasks();
        updateTasksDisplay();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (allTasksModal.classList.contains('active')) {
            const currentFilter = document.querySelector('.filter-btn.active').dataset.filter;
            openAllTasksModal(currentFilter);
        }
    } else if (target.closest('.edit-btn')) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        editTask(taskIndex);
    } else if (target.closest('.delete-btn')) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
            tasks.splice(taskIndex, 1);
            saveTasks();
            updateTasksDisplay();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if (allTasksModal.classList.contains('active')) {
                const currentFilter = document.querySelector('.filter-btn.active').dataset.filter;
                openAllTasksModal(currentFilter);
            }
        }
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
function editTask(taskIndex) {
    const task = tasks[taskIndex];
    
    taskInput.value = task.text;
    difficultySelect.value = task.difficulty;
    deadlineInput.value = task.deadline || '';
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    tasks.splice(taskIndex, 1);
    saveTasks();
    updateTasksDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function handleFilterClick(e) {
    const filter = e.target.dataset.filter;
    filterBtns.forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
    openAllTasksModal(filter);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function setupModalControls() {
    // –ü—Ä–æ—Ñ–∏–ª—å
    profileAvatar.addEventListener('click', () => {
        profileModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    });
    
    closeProfile.addEventListener('click', () => {
        profileModal.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settingsBtn.addEventListener('click', () => {
        settingsModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    });
    
    closeSettings.addEventListener('click', () => {
        settingsModal.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    // –í—ã—Ö–æ–¥
    logoutBtn.addEventListener('click', () => {
        window.location.href = 'login.html';
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    document.querySelectorAll('.modal-overlay').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π
function setupThemeSwitcher() {
    themeBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            themeBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            if (btn.dataset.theme === 'dark') {
                document.body.classList.add('dark-theme');
                localStorage.setItem('theme', 'dark');
            } else {
                document.body.classList.remove('dark-theme');
                localStorage.setItem('theme', 'light');
            }
        });
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('theme') || 'light';
    const themeBtn = document.querySelector(`.theme-btn[data-theme="${savedTheme}"]`);
    if (themeBtn) {
        themeBtn.click();
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–º
function setupAvatarUpload() {
    uploadBtn.addEventListener('click', () => {
        avatarUpload.click();
    });
    
    avatarUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
                avatarPreview.src = event.target.result;
                profileAvatar.src = event.target.result;
                profileAvatarLarge.src = event.target.result;
                localStorage.setItem('avatar', event.target.result);
            };
            reader.readAsDataURL(file);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
    const savedAvatar = localStorage.getItem('avatar');
    if (savedAvatar) {
        avatarPreview.src = savedAvatar;
        profileAvatar.src = savedAvatar;
        profileAvatarLarge.src = savedAvatar;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function setupSettingsSave() {
    saveSettingsBtn.addEventListener('click', () => {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (newPassword && newPassword !== confirmPassword) {
            alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
            return;
        }
        
        if (newPassword) {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
        }
        
        settingsModal.classList.remove('active');
        document.body.style.overflow = '';
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function init() {
    loadTasks();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupModalControls();
    setupThemeSwitcher();
    setupAvatarUpload();
    setupSettingsSave();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(updateTimers, 60000);
    
    // –°–æ–±—ã—Ç–∏—è
    addTaskBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') addTask();
    });
    
    viewAllBtn.addEventListener('click', () => openAllTasksModal('all'));
    closeAllTasks.addEventListener('click', closeAllTasksModal);
    
    // –ö–ª–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    tasksList.addEventListener('click', handleTaskAction);
    deadlinesList.addEventListener('click', handleTaskAction);
    allTasksList.addEventListener('click', handleTaskAction);
    
    // –§–∏–ª—å—Ç—Ä—ã
    filterBtns.forEach(btn => {
        btn.addEventListener('click', handleFilterClick);
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);


// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
function createDeadlineElement(task) {
    const deadlineElement = document.createElement('div');
    deadlineElement.className = 'deadline-item';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞
    const now = new Date();
    const deadlineDate = new Date(task.deadline);
    const timeDiff = deadlineDate - now;
    const hoursDiff = timeDiff / (1000 * 60 * 60);
    
    let timerClass = 'normal';
    let timerText = '';
    
    if (timeDiff < 0) {
        // –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª
        timerClass = 'urgent';
        timerText = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
    } else if (hoursDiff < 24) {
        // –ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
        timerClass = 'urgent';
        timerText = `–û—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(hoursDiff)} —á`;
    } else if (hoursDiff < 72) {
        // –ú–µ–Ω—å—à–µ 3 –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        timerClass = 'warning';
        timerText = `–û—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(hoursDiff / 24)} –¥`;
    } else {
        // –ë–æ–ª—å—à–µ 3 –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        timerClass = 'normal';
        timerText = `–û—Å—Ç–∞–ª–æ—Å—å: ${Math.floor(hoursDiff / 24)} –¥`;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞
    const deadlineFormatted = deadlineDate.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    deadlineElement.innerHTML = `
        <div class="deadline-text">
            <i class="fas fa-calendar-alt"></i>
            ${task.text}
            <span class="deadline-timer ${timerClass}">
                <i class="fas fa-clock"></i> ${timerText}
            </span>
        </div>
        <div class="deadline-time">
            <i class="fas fa-calendar-check"></i>
            –î–µ–¥–ª–∞–π–Ω: ${deadlineFormatted}
        </div>
    `;
    
    return deadlineElement;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á–∞"
function getTaskWord(count) {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
        return '–∑–∞–¥–∞—á';
    }
    
    if (lastDigit === 1) {
        return '–∑–∞–¥–∞—á–∞';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
        return '–∑–∞–¥–∞—á–∏';
    }
    
    return '–∑–∞–¥–∞—á';
}

// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
document.getElementById('addTaskBtn').addEventListener('click', addTask);